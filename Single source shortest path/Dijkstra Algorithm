#include<bits/stdc++.h>
using namespace std;
#define MX 10000
#define INF 1000000000
struct node
{
    int value,cost;
};
vector<node>G[MX];
bool visited[MX];
int dis[MX];
void reset()
{
    int i;
    for(i=0;i<MX;i++)
    {
        G[i].clear();
        visited[i]=0;
        dis[i]=INF;
    }
}
class cmp
{
public:
    bool operator()(node &A, node &B)
    {
        if(A.cost>B.cost)
        {
            return true;
        }
         return false;
    }
};
void dijkstra(int source)
{
    priority_queue<node,vector<node>,cmp>PQ;
    PQ.push({source,0});
    while(!PQ.empty())
    {
        node current=PQ.top();
        PQ.pop();
        int value,cost;
        value=current.value;
        cost=current.cost;
        if(visited[value]==1)
        {
            continue;
        }
        dis[value]=cost;
        visited[value]=1;
        for(int i=0;i<G[value].size();i++)
        {
            int next,nextcost;
            next=G[value][i].value;
            nextcost=G[value][i].cost;
            if(visited[next]==0)
            {
                PQ.push({next,cost+nextcost});
            }
        }
    }
}
int main()
{
     reset();
    int nodes,edges,i,source;
    cout<<"Enter number of nodes and edges\n";
    cin>>nodes>>edges;
    cout<<"Enter connected node and weight\n";
    for(i=1;i<=edges;i++)
    {
        int u,v,w;
        cin>>u>>v>>w;
        G[u].push_back({v,w});
    }
    cout<<"Enter source node\n";
    cin>>source;
    dijkstra(source);
    for(i=1;i<=nodes;i++)
    {
        cout<<"Node: "<<i<<" Distance :";
        if(dis[i]==INF)
        {
           cout<<"This node can't visited "<<endl;
        }
        else
        {
            cout<<dis[i]<<endl;
        }
    }
    return 0;
}
